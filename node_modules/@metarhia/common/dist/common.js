'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var submodules = ['array', // Arrays manipulations
'auth', // Validation of data for authentication/authorization
'btree', // B-Tree for indexes in DB
'cache', // Cache (enhanced Map)
'callbacks', // Callback utilities
'data', // Data structures manipulations
'enum', // Enumerated type
'events', // Events and emitter
'flags', // Flags data type
'fp', // Functional programming
'fs', // File System
'id', // Keys and identifiers
'int64', // Int64
'iterator', // Iterator
'math', // Math common function
'mp', // Metaprogramming
'network', // Network utilities
'oop', // Object-oriented programming
'pool', // Object pool
'sort', // Sort compare functions
'stream', // Stream utilities
'strings', // Strings utilities
'time', // Date and Time functions
'uint64', // Uint64
'units', // Units conversion
'utilities' // Common utilities
].map(function (path) {
  return require('./lib/' + path);
});
module.exports = Object.assign.apply(Object, [{}].concat(_toConsumableArray(submodules)));