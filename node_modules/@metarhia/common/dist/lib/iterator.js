/* eslint-disable no-use-before-define */
'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _marked = /*#__PURE__*/regeneratorRuntime.mark(rangeGenerator);

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var toIterator = function toIterator(base) {
  if (!base[Symbol.iterator]) {
    throw new TypeError('Base is not Iterable');
  }

  return base[Symbol.iterator]();
};

var Iterator = /*#__PURE__*/function () {
  function Iterator(base) {
    _classCallCheck(this, Iterator);

    this.base = toIterator(base);
  }

  _createClass(Iterator, [{
    key: Symbol.iterator,
    value: function value() {
      return this;
    }
  }, {
    key: "next",
    value: function next() {
      return this.base.next();
    }
  }, {
    key: "count",
    value: function count() {
      var count = 0;

      while (!this.next().done) {
        count++;
      }

      return count;
    }
  }, {
    key: "each",
    value: function each(fn, thisArg) {
      this.forEach(fn, thisArg);
    }
  }, {
    key: "forEach",
    value: function forEach(fn, thisArg) {
      var _iterator = _createForOfIteratorHelper(this),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var value = _step.value;
          fn.call(thisArg, value);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "every",
    value: function every(predicate, thisArg) {
      var _iterator2 = _createForOfIteratorHelper(this),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var value = _step2.value;

          if (!predicate.call(thisArg, value)) {
            return false;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return true;
    }
  }, {
    key: "find",
    value: function find(predicate, thisArg) {
      var _iterator3 = _createForOfIteratorHelper(this),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var value = _step3.value;

          if (predicate.call(thisArg, value)) {
            return value;
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      return undefined;
    }
  }, {
    key: "includes",
    value: function includes(element) {
      var _iterator4 = _createForOfIteratorHelper(this),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var value = _step4.value;

          if (value === element || Number.isNaN(value) && Number.isNaN(element)) {
            return true;
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      return false;
    }
  }, {
    key: "reduce",
    value: function reduce(reducer, initialValue) {
      var result = initialValue;

      if (result === undefined) {
        var next = this.next();

        if (next.done) {
          throw new TypeError('Reduce of consumed iterator with no initial value');
        }

        result = next.value;
      }

      var _iterator5 = _createForOfIteratorHelper(this),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var value = _step5.value;
          result = reducer(result, value);
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      return result;
    }
  }, {
    key: "some",
    value: function some(predicate, thisArg) {
      var _iterator6 = _createForOfIteratorHelper(this),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var value = _step6.value;

          if (predicate.call(thisArg, value)) {
            return true;
          }
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }

      return false;
    }
  }, {
    key: "someCount",
    value: function someCount(predicate, count, thisArg) {
      var n = 0;

      var _iterator7 = _createForOfIteratorHelper(this),
          _step7;

      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var value = _step7.value;

          if (predicate.call(thisArg, value)) {
            if (++n === count) return true;
          }
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }

      return false;
    }
  }, {
    key: "collectTo",
    value: function collectTo(CollectionClass) {
      return new CollectionClass(this);
    }
  }, {
    key: "collectWith",
    value: function collectWith(obj, collector) {
      this.forEach(function (element) {
        return collector(obj, element);
      });
      return obj;
    }
  }, {
    key: "toArray",
    value: function toArray() {
      return Array.from(this);
    } // Transforms an iterator of key-value pairs into an object.
    // This is similar to what `{Object.fromEntries()}` would offer.

  }, {
    key: "toObject",
    value: function toObject() {
      return this.collectWith({}, function (obj, _ref) {
        var key = _ref[0],
            val = _ref[1];
        obj[key] = val;
      });
    }
  }, {
    key: "map",
    value: function map(mapper, thisArg) {
      return new MapIterator(this, mapper, thisArg);
    }
  }, {
    key: "filter",
    value: function filter(predicate, thisArg) {
      return new FilterIterator(this, predicate, thisArg);
    } // Creates an iterator that both filters and maps with the passed `mapper`.
    // This iterator will call `mapper` on each element and if mapper returns
    // NOT `filterValue` it will be returned, otherwise it is ignored.
    // Signature: mapper[, thisArg[, filterValue]]
    //   mapper <Function> function that maps values and returns either new value
    //       that will be the next value of the new iterator or `filterValue`
    //       that will be ignored.
    //     value <any> iterator element
    //   thisArg <any> value to be used as `this` when calling `mapper`
    //   filterValue <any> value to filter out `mapper` results.

  }, {
    key: "filterMap",
    value: function filterMap(mapper, thisArg, filterValue) {
      return new FilterMapIterator(this, mapper, thisArg, filterValue);
    }
  }, {
    key: "flat",
    value: function flat() {
      var depth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      return new FlatIterator(this, depth);
    }
  }, {
    key: "flatMap",
    value: function flatMap(mapper, thisArg) {
      return new FlatMapIterator(this, mapper, thisArg);
    }
  }, {
    key: "zip",
    value: function zip() {
      for (var _len = arguments.length, iterators = new Array(_len), _key = 0; _key < _len; _key++) {
        iterators[_key] = arguments[_key];
      }

      return new ZipIterator(this, iterators);
    }
  }, {
    key: "chain",
    value: function chain() {
      for (var _len2 = arguments.length, iterators = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        iterators[_key2] = arguments[_key2];
      }

      return new ChainIterator(this, iterators);
    }
  }, {
    key: "take",
    value: function take(amount) {
      return new TakeIterator(this, amount);
    }
  }, {
    key: "takeWhile",
    value: function takeWhile(predicate, thisArg) {
      return new TakeWhileIterator(this, predicate, thisArg);
    }
  }, {
    key: "skip",
    value: function skip(amount) {
      for (var i = 0; i < amount; i++) {
        this.next();
      }

      return this;
    }
  }, {
    key: "skipWhile",
    value: function skipWhile(predicate, thisArg) {
      return new SkipWhileIterator(this, predicate, thisArg);
    } // Consumes an iterator, partitioning it into Arrays
    // Signature: predicate[, thisArg]
    //   predicate <Function> function returns a value to partition this iterator
    //     value <any> current iterator element
    //     Returns: <boolean> | <number> key denoting resulting partition this
    //         value will be assigned to. Number denotes index in the resulting
    //         array. Boolean will be cast to number
    //   thisArg <any> value to be used as `this` when calling `predicate`
    //   Returns: <Array> array of partitions (arrays), will always have at
    //       least 2 arrays in it

  }, {
    key: "partition",
    value: function partition(predicate, thisArg) {
      var result = [[], []];

      var _iterator8 = _createForOfIteratorHelper(this),
          _step8;

      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var value = _step8.value;
          var res = predicate.call(thisArg, value);
          var index = typeof res === 'number' ? res : Number(res);

          if (result.length <= index) {
            var oldLength = result.length;
            result.length = index + 1;

            for (var i = oldLength; i < result.length; i++) {
              result[i] = [];
            }
          }

          result[index].push(value);
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }

      return result;
    }
  }, {
    key: "enumerate",
    value: function enumerate() {
      return new EnumerateIterator(this);
    } // Consumes an iterator grouping values by keys
    // Signature: classifier[, thisArg]
    //   classifier <Function> gets value to group by
    //     value <any> current iterator value
    //     Returns: <any> value to group by
    //   thisArg <any> value to be used as `this` when calling `classifier`
    //   Returns: <Map> map with arrays of iterator values grouped
    //       by keys returned by `classifier`

  }, {
    key: "groupBy",
    value: function groupBy(classifier, thisArg) {
      var map = new Map();

      var _iterator9 = _createForOfIteratorHelper(this),
          _step9;

      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          var value = _step9.value;
          var key = classifier.call(thisArg, value);
          var collection = map.get(key);
          if (!collection) map.set(key, [value]);else collection.push(value);
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }

      return map;
    }
  }, {
    key: "join",
    value: function join() {
      var sep = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ',';
      var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var suffix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var result = prefix;

      var _this$next = this.next(),
          done = _this$next.done,
          value = _this$next.value;

      if (!done) {
        result += value;

        var _iterator10 = _createForOfIteratorHelper(this),
            _step10;

        try {
          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
            var _value = _step10.value;
            result += sep + _value;
          }
        } catch (err) {
          _iterator10.e(err);
        } finally {
          _iterator10.f();
        }
      }

      return result + suffix;
    } // Find value in this iterator by comparing every value with
    // the found one using `comparator`
    // Signature: comparator[, accessor[, thisArg]]
    //   comparator <Function> returns `true` if new value should be accepted
    //     currValue <any> current value, starts with undefined
    //     nextValue <any> next value
    //     Returns: <boolean> `true` if next value should be accepted
    //   accessor <Function> gets value to compare by, current iterator value
    //       is used by default
    //     value <any> current iterator value
    //     Returns: <any> value to compare by
    //   thisArg <any> value to be used as `this` when calling `accessor` and
    //       `comparator`
    // Returns: last iterator value where `comparator` returned `true`,
    //     <undefined> by default

  }, {
    key: "findCompare",
    value: function findCompare(comparator, accessor, thisArg) {
      var res = undefined;
      var resCompareBy = undefined;

      var _iterator11 = _createForOfIteratorHelper(this),
          _step11;

      try {
        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
          var value = _step11.value;
          var compareBy = accessor ? accessor.call(thisArg, value) : value;

          if (comparator.call(thisArg, resCompareBy, compareBy)) {
            resCompareBy = compareBy;
            res = value;
          }
        }
      } catch (err) {
        _iterator11.e(err);
      } finally {
        _iterator11.f();
      }

      return res;
    } // Find the maximum value in this iterator
    // Signature: [accessor[, thisArg]]
    //   accessor <Function> gets value to compare by, current iterator value
    //       is used by default
    //     value <any> current iterator value
    //     Returns: <any> value to compare by
    //   thisArg <any> value to be used as `this` when calling `accessor`
    // Returns: element with maximum value or <undefined> if iterator is empty

  }, {
    key: "max",
    value: function max(accessor, thisArg) {
      return this.findCompare(function (curr, next) {
        return curr === undefined || next > curr;
      }, accessor, thisArg);
    } // Find the minimum value in this iterator
    // Signature: [accessor[, thisArg]]
    //   accessor <Function> gets value to compare by, current iterator value
    //       is used by default
    //     value <any> current iterator value
    //     Returns: <any> value to compare by
    //   thisArg <any> value to be used as `this` when calling `accessor`
    // Returns: element with minimum value or <undefined> if iterator is empty

  }, {
    key: "min",
    value: function min(accessor, thisArg) {
      return this.findCompare(function (curr, next) {
        return curr === undefined || next < curr;
      }, accessor, thisArg);
    } // Call a function with `this`. Will be equivalent to calling `fn(it)`.
    //   fn <Function>
    //     this <Iterator>
    // Returns: the result of `fn(this)` call.

  }, {
    key: "apply",
    value: function apply(fn) {
      return fn(this);
    } // Call a function with `this` and wrap the result in an Iterator.
    //   fn <Function>
    //     this <Iterator>
    // Returns: <Iterator> result of `fn(this)` wrapped in an Iterator.
    //
    // Example:
    // iter([1, 2])
    //   .chainApply(([a, b]) => [a + b, a - b])
    //   .join(', ');
    // Result: '3, -1'

  }, {
    key: "chainApply",
    value: function chainApply(fn) {
      var res = fn(this);
      return iter(res && res[Symbol.iterator] ? res : [res]);
    } // Create iterator by zipping multiple provided iterators into one
    // Signature: ...iterators
    //   iterators <Array>
    // Returns: <Iterator>

  }], [{
    key: "zip",
    value: function zip(base) {
      for (var _len3 = arguments.length, iterators = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        iterators[_key3 - 1] = arguments[_key3];
      }

      return new ZipIterator(toIterator(base), iterators);
    } // Create iterator iterating over the range
    // Signature: start, stop[, step]
    //   start <number>
    //   stop <number>
    //   step <number> (optional), default: `1`
    //
    // Returns: <Iterator>

  }, {
    key: "range",
    value: function range(start, stop, step) {
      return new Iterator(rangeGenerator(start, stop, step));
    }
  }]);

  return Iterator;
}();

Object.defineProperty(Iterator.prototype, Symbol.toStringTag, {
  value: 'Metarhia Iterator',
  writable: false,
  enumerable: false,
  configurable: true
});

function rangeGenerator(start, stop) {
  var step,
      _args = arguments;
  return regeneratorRuntime.wrap(function rangeGenerator$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          step = _args.length > 2 && _args[2] !== undefined ? _args[2] : 1;

          if (stop === undefined) {
            stop = start;
            start = 0;
          }

        case 2:
          if (!true) {
            _context.next = 10;
            break;
          }

          if (!(step > 0 && start >= stop || step < 0 && start <= stop)) {
            _context.next = 5;
            break;
          }

          return _context.abrupt("return");

        case 5:
          _context.next = 7;
          return start;

        case 7:
          start += step;
          _context.next = 2;
          break;

        case 10:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}

var MapIterator = /*#__PURE__*/function (_Iterator) {
  _inherits(MapIterator, _Iterator);

  var _super = _createSuper(MapIterator);

  function MapIterator(base, mapper, thisArg) {
    var _this;

    _classCallCheck(this, MapIterator);

    _this = _super.call(this, base);
    _this.mapper = mapper;
    _this.thisArg = thisArg;
    return _this;
  }

  _createClass(MapIterator, [{
    key: "next",
    value: function next() {
      var _this$base$next = this.base.next(),
          done = _this$base$next.done,
          value = _this$base$next.value;

      return {
        done: done,
        value: done ? undefined : this.mapper.call(this.thisArg, value)
      };
    }
  }]);

  return MapIterator;
}(Iterator);

var FilterIterator = /*#__PURE__*/function (_Iterator2) {
  _inherits(FilterIterator, _Iterator2);

  var _super2 = _createSuper(FilterIterator);

  function FilterIterator(base, predicate, thisArg) {
    var _this2;

    _classCallCheck(this, FilterIterator);

    _this2 = _super2.call(this, base);
    _this2.predicate = predicate;
    _this2.thisArg = thisArg;
    return _this2;
  }

  _createClass(FilterIterator, [{
    key: "next",
    value: function next() {
      var _iterator12 = _createForOfIteratorHelper(this.base),
          _step12;

      try {
        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
          var value = _step12.value;

          if (this.predicate.call(this.thisArg, value)) {
            return {
              done: false,
              value: value
            };
          }
        }
      } catch (err) {
        _iterator12.e(err);
      } finally {
        _iterator12.f();
      }

      return {
        done: true,
        value: undefined
      };
    }
  }]);

  return FilterIterator;
}(Iterator);

var FilterMapIterator = /*#__PURE__*/function (_Iterator3) {
  _inherits(FilterMapIterator, _Iterator3);

  var _super3 = _createSuper(FilterMapIterator);

  function FilterMapIterator(base, mapper, thisArg, filterValue) {
    var _this3;

    _classCallCheck(this, FilterMapIterator);

    _this3 = _super3.call(this, base);
    _this3.mapper = mapper;
    _this3.thisArg = thisArg;
    _this3.filterValue = filterValue;
    return _this3;
  }

  _createClass(FilterMapIterator, [{
    key: "next",
    value: function next() {
      var _iterator13 = _createForOfIteratorHelper(this.base),
          _step13;

      try {
        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
          var value = _step13.value;
          var nextValue = this.mapper.call(this.thisArg, value);

          if (nextValue !== this.filterValue) {
            return {
              done: false,
              value: nextValue
            };
          }
        }
      } catch (err) {
        _iterator13.e(err);
      } finally {
        _iterator13.f();
      }

      return {
        done: true,
        value: undefined
      };
    }
  }]);

  return FilterMapIterator;
}(Iterator);

var FlatIterator = /*#__PURE__*/function (_Iterator4) {
  _inherits(FlatIterator, _Iterator4);

  var _super4 = _createSuper(FlatIterator);

  function FlatIterator(base, depth) {
    var _this4;

    _classCallCheck(this, FlatIterator);

    _this4 = _super4.call(this, base);
    _this4.currentDepth = 0;
    _this4.stack = new Array(depth + 1);
    _this4.stack[0] = base;
    return _this4;
  }

  _createClass(FlatIterator, [{
    key: "next",
    value: function next() {
      while (this.currentDepth >= 0) {
        var top = this.stack[this.currentDepth];
        var next = top.next();

        if (next.done) {
          this.stack[this.currentDepth] = null;
          this.currentDepth--;
          continue;
        }

        if (this.currentDepth === this.stack.length - 1 || !next.value[Symbol.iterator]) {
          return next;
        }

        this.stack[++this.currentDepth] = next.value[Symbol.iterator]();
      }

      return {
        done: true,
        value: undefined
      };
    }
  }]);

  return FlatIterator;
}(Iterator);

var FlatMapIterator = /*#__PURE__*/function (_Iterator5) {
  _inherits(FlatMapIterator, _Iterator5);

  var _super5 = _createSuper(FlatMapIterator);

  function FlatMapIterator(base, mapper, thisArg) {
    var _this5;

    _classCallCheck(this, FlatMapIterator);

    _this5 = _super5.call(this, base);
    _this5.mapper = mapper;
    _this5.thisArg = thisArg;
    _this5.currentIterator = null;
    return _this5;
  }

  _createClass(FlatMapIterator, [{
    key: "next",
    value: function next() {
      if (!this.currentIterator) {
        var _next = this.base.next();

        if (_next.done) {
          return _next;
        }

        var value = this.mapper.call(this.thisArg, _next.value);

        if (!value[Symbol.iterator]) {
          return {
            done: false,
            value: value
          };
        }

        this.currentIterator = toIterator(value);
      }

      var next = this.currentIterator.next();

      if (next.done) {
        this.currentIterator = null;
        return this.next();
      }

      return next;
    }
  }]);

  return FlatMapIterator;
}(Iterator);

var TakeIterator = /*#__PURE__*/function (_Iterator6) {
  _inherits(TakeIterator, _Iterator6);

  var _super6 = _createSuper(TakeIterator);

  function TakeIterator(base, amount) {
    var _this6;

    _classCallCheck(this, TakeIterator);

    _this6 = _super6.call(this, base);
    _this6.amount = amount;
    _this6.iterated = 0;
    return _this6;
  }

  _createClass(TakeIterator, [{
    key: "next",
    value: function next() {
      this.iterated++;

      if (this.iterated <= this.amount) {
        return this.base.next();
      }

      return {
        done: true,
        value: undefined
      };
    }
  }]);

  return TakeIterator;
}(Iterator);

var TakeWhileIterator = /*#__PURE__*/function (_Iterator7) {
  _inherits(TakeWhileIterator, _Iterator7);

  var _super7 = _createSuper(TakeWhileIterator);

  function TakeWhileIterator(base, predicate, thisArg) {
    var _this7;

    _classCallCheck(this, TakeWhileIterator);

    _this7 = _super7.call(this, base);
    _this7.predicate = predicate;
    _this7.thisArg = thisArg;
    _this7.done = false;
    return _this7;
  }

  _createClass(TakeWhileIterator, [{
    key: "next",
    value: function next() {
      if (this.done) return {
        done: true,
        value: undefined
      };
      var next = this.base.next();

      if (!next.done && this.predicate.call(this.thisArg, next.value)) {
        return next;
      }

      this.done = true;
      return {
        done: true,
        value: undefined
      };
    }
  }]);

  return TakeWhileIterator;
}(Iterator);

var ZipIterator = /*#__PURE__*/function (_Iterator8) {
  _inherits(ZipIterator, _Iterator8);

  var _super8 = _createSuper(ZipIterator);

  function ZipIterator(base, iterators) {
    var _this8;

    _classCallCheck(this, ZipIterator);

    _this8 = _super8.call(this, base);
    _this8.iterators = iterators.map(toIterator);
    return _this8;
  }

  _createClass(ZipIterator, [{
    key: "next",
    value: function next() {
      var result = [];
      var next = this.base.next();

      if (next.done) {
        return next;
      }

      result.push(next.value);

      var _iterator14 = _createForOfIteratorHelper(this.iterators),
          _step14;

      try {
        for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
          var iterator = _step14.value;

          var _next2 = iterator.next();

          if (_next2.done) {
            return _next2;
          }

          result.push(_next2.value);
        }
      } catch (err) {
        _iterator14.e(err);
      } finally {
        _iterator14.f();
      }

      return {
        done: false,
        value: result
      };
    }
  }]);

  return ZipIterator;
}(Iterator);

var ChainIterator = /*#__PURE__*/function (_Iterator9) {
  _inherits(ChainIterator, _Iterator9);

  var _super9 = _createSuper(ChainIterator);

  function ChainIterator(base, iterators) {
    var _this9;

    _classCallCheck(this, ChainIterator);

    _this9 = _super9.call(this, base);
    _this9.currentIterator = base;
    _this9.iterators = iterators.map(toIterator)[Symbol.iterator]();
    return _this9;
  }

  _createClass(ChainIterator, [{
    key: "next",
    value: function next() {
      var next = this.currentIterator.next();

      if (!next.done) {
        return next;
      }

      var iterator = this.iterators.next();

      if (iterator.done) {
        return iterator;
      }

      this.currentIterator = iterator.value;
      return this.next();
    }
  }]);

  return ChainIterator;
}(Iterator);

var EnumerateIterator = /*#__PURE__*/function (_Iterator10) {
  _inherits(EnumerateIterator, _Iterator10);

  var _super10 = _createSuper(EnumerateIterator);

  function EnumerateIterator(base) {
    var _this10;

    _classCallCheck(this, EnumerateIterator);

    _this10 = _super10.call(this, base);
    _this10.index = 0;
    return _this10;
  }

  _createClass(EnumerateIterator, [{
    key: "next",
    value: function next() {
      var next = this.base.next();

      if (next.done) {
        return next;
      }

      return {
        done: false,
        value: [this.index++, next.value]
      };
    }
  }]);

  return EnumerateIterator;
}(Iterator);

var SkipWhileIterator = /*#__PURE__*/function (_Iterator11) {
  _inherits(SkipWhileIterator, _Iterator11);

  var _super11 = _createSuper(SkipWhileIterator);

  function SkipWhileIterator(base, predicate, thisArg) {
    var _this11;

    _classCallCheck(this, SkipWhileIterator);

    _this11 = _super11.call(this, base);
    _this11.predicate = predicate;
    _this11.thisArg = thisArg;
    _this11.doneSkipping = false;
    return _this11;
  }

  _createClass(SkipWhileIterator, [{
    key: "next",
    value: function next() {
      var next = this.base.next();
      if (this.doneSkipping) return next;

      while (!next.done && this.predicate.call(this.thisArg, next.value)) {
        next = this.base.next();
      }

      this.doneSkipping = true;
      return next;
    }
  }]);

  return SkipWhileIterator;
}(Iterator);

var iter = function iter(base) {
  return new Iterator(base);
};

module.exports = {
  Iterator: Iterator,
  iter: iter,
  iterEntries: function iterEntries(obj) {
    return iter(Object.entries(obj));
  },
  iterKeys: function iterKeys(obj) {
    return iter(Object.keys(obj));
  },
  iterValues: function iterValues(obj) {
    return iter(Object.values(obj));
  }
};