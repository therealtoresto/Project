'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var _require = require('events'),
    EventEmitter = _require.EventEmitter; // Forward an event from one EventEmitter to another
// Signature: from, to, event[, newEvent]
//   from - <EventEmitter>, to listen for event
//   to - <EventEmitter>, to emit event on
//   event - <string>, event name
//   newEvent - <string>, (optional), default: `event`, forwarded event name


var forwardEvent = function forwardEvent(from, to, event) {
  var newEvent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : event;

  if (event === '*') {
    from.on(event, function (eventName) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      to.emit.apply(to, [eventName].concat(args));
    });
  } else {
    from.on(event, function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      to.emit.apply(to, [newEvent].concat(args));
    });
  }
}; // Forward events from one EventEmitter to another
// Signature: from, to[, events]
//   from - <EventEmitter>, to listen for event
//   to - <EventEmitter>, to emit event on
//   events - <string> | <Object> | <string[]>, (optional), events names
//
// Example: forwardEvents(from, to);
// Example: forwardEvents(from, to, 'eventName');
// Example: forwardEvents(from, to, { eventName: 'newEventName' });
// Example: forwardEvents(from, to, ['eventName1', 'eventName2']);


var forwardEvents = function forwardEvents(from, to, events) {
  if (!events) {
    forwardEvent(from, to, '*');
    return;
  }

  if (typeof events === 'string') {
    forwardEvent(from, to, events);
    return;
  }

  if (Array.isArray(events)) {
    var _iterator = _createForOfIteratorHelper(events),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var event = _step.value;
        forwardEvent(from, to, event);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return;
  }

  for (var _event in events) {
    forwardEvent(from, to, _event, events[_event]);
  }
};

var EnhancedEmitter = /*#__PURE__*/function (_EventEmitter) {
  _inherits(EnhancedEmitter, _EventEmitter);

  var _super = _createSuper(EnhancedEmitter);

  function EnhancedEmitter() {
    _classCallCheck(this, EnhancedEmitter);

    return _super.apply(this, arguments);
  }

  _createClass(EnhancedEmitter, [{
    key: "emit",
    // Call listener with provided arguments
    // Signature: ...args
    //   args - <Array>, arguments to be passed
    value: function emit() {
      var _get2, _get3;

      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      (_get2 = _get(_getPrototypeOf(EnhancedEmitter.prototype), "emit", this)).call.apply(_get2, [this, '*'].concat(args));

      (_get3 = _get(_getPrototypeOf(EnhancedEmitter.prototype), "emit", this)).call.apply(_get3, [this].concat(args));
    } // Forward events from one EventEmitter to another
    //   to - <EventEmitter>, to emit event on
    //   events - <string> | <Object> | <string[]>, events names

  }, {
    key: "forward",
    value: function forward(to, events) {
      forwardEvents(this, to, events);
    }
  }]);

  return EnhancedEmitter;
}(EventEmitter); // Create EnhancedEmitter, enhanced EventEmitter
// with wildcard and forward method
// Returns: <EventEmitter>


var emitter = function emitter() {
  return new EnhancedEmitter();
};

module.exports = {
  forwardEvents: forwardEvents,
  emitter: emitter,
  EnhancedEmitter: EnhancedEmitter
};