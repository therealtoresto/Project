'use strict';

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var SCALAR_TYPES = ['boolean', 'number', 'string', 'undefined']; // Check if value is scalar
//   value - <any>
// Returns: <boolean>

var isScalar = function isScalar(value) {
  return SCALAR_TYPES.includes(_typeof(value));
}; // Copy dataset (copy objects to new array)
//   ds - <Object[]>, source dataset to be copied
// Returns: <Object[]>


var copy = function copy(ds) {
  return ds.slice();
}; // Clone object or array
//   obj - <Object> | <Array>
// Returns: <Object> | <Array>


var clone = function clone(val) {
  if (_typeof(val) !== 'object' || val === null) {
    return val;
  }

  var objOrArray = Array.isArray(val) ? new Array(val.length) : {};

  for (var key in val) {
    if (Object.prototype.hasOwnProperty.call(val, key)) {
      objOrArray[key] = clone(val[key]);
    }
  }

  return objOrArray;
};

var duplicateWithReferences = function duplicateWithReferences(val, references) {
  if (_typeof(val) !== 'object' || val === null) {
    return val;
  }

  var objOrArray;

  if (Array.isArray(val)) {
    objOrArray = new Array(val.length);
  } else if (Buffer.isBuffer(val)) {
    objOrArray = Buffer.from(val);
  } else if (!val.constructor) {
    objOrArray = Object.create(null);
  } else if (val.constructor.name !== 'Object') {
    objOrArray = new val.constructor(val.toString());
  } else {
    objOrArray = {};
  }

  references.set(val, objOrArray);

  for (var key in val) {
    if (!Object.prototype.hasOwnProperty.call(val, key)) {
      continue;
    }

    var reference = references.get(val[key]);

    if (reference !== undefined) {
      objOrArray[key] = reference;
    } else {
      objOrArray[key] = duplicateWithReferences(val[key], references);
    }
  }

  return objOrArray;
}; // Duplicate object or array (properly handles prototype and circular links)
//   obj - <Object> | <Array>
// Returns: <Object> | <Array>


var duplicate = function duplicate(val) {
  return duplicateWithReferences(val, new Map());
}; // Read property by dot-separated path
//   data - <Object>
//   dataPath - <string>, dot-separated path
// Returns: <any>, value


var getByPath = function getByPath(data, dataPath) {
  var path = dataPath.split('.');
  var obj = data;

  for (var i = 0; i < path.length; i++) {
    var prop = path[i];
    var next = obj[prop];
    if (next === undefined || next === null) return next;
    obj = next;
  }

  return obj;
}; // Set property by dot-separated path
//   data - <Object>
//   dataPath - <string>, dot-separated path
//   value - <any>, new value


var setByPath = function setByPath(data, dataPath, value) {
  var path = dataPath.split('.');
  var len = path.length;
  var obj = data;
  var i = 0;
  var next, prop;

  for (;;) {
    if (_typeof(obj) !== 'object') return false;
    prop = path[i];

    if (i === len - 1) {
      obj[prop] = value;
      return true;
    }

    next = obj[prop];

    if (next === undefined || next === null) {
      next = {};
      obj[prop] = next;
    }

    obj = next;
    i++;
  }
}; // Delete property by dot-separated path
//   data - <Object>
//   dataPath - <string>, dot-separated path
// Returns: <boolean>


var deleteByPath = function deleteByPath(data, dataPath) {
  var path = dataPath.split('.');
  var obj = data;
  var len = path.length;

  for (var i = 0; i < len; i++) {
    var prop = path[i];
    var next = obj[prop];

    if (i === len - 1) {
      if (Object.prototype.hasOwnProperty.call(obj, prop)) {
        delete obj[prop];
        return true;
      }
    } else {
      if (next === undefined || next === null) return false;
      obj = next;
    }
  }

  return false;
}; // Distinctly merge multiple arrays
// Signature: ...args
//   args - <Array[]>, arrays with elements to be merged
// Returns: <Array>


var merge = function merge() {
  var unique = new Set();
  var ilen = arguments.length;

  for (var i = 0; i < ilen; i++) {
    var arr = i < 0 || arguments.length <= i ? undefined : arguments[i];

    for (var j = 0; j < arr.length; j++) {
      unique.add(arr[j]);
    }
  }

  return _toConsumableArray(unique);
}; // Merge multiple objects with merger
// Signature: merger, ...objs
//   merger - <Function>
//     key - <string> current merging key
//     ...values - <any[]> values under key
//   objs - <Object[]>, objects to be merged
// Returns: <Object>


var mergeObjects = function mergeObjects(merger) {
  var keys = new Set();

  for (var _len = arguments.length, objs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    objs[_key - 1] = arguments[_key];
  }

  for (var _i = 0, _objs = objs; _i < _objs.length; _i++) {
    var obj = _objs[_i];

    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) keys.add(key);
    }
  }

  var result = {};

  var _iterator = _createForOfIteratorHelper(keys),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _key2 = _step.value;
      var args = new Array(objs.length);

      for (var i = 0; i < objs.length; ++i) {
        args[i] = objs[i][_key2];
      }

      result[_key2] = merger.apply(void 0, [_key2].concat(args));
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return result;
};

module.exports = {
  isScalar: isScalar,
  copy: copy,
  clone: clone,
  duplicate: duplicate,
  getByPath: getByPath,
  setByPath: setByPath,
  deleteByPath: deleteByPath,
  merge: merge,
  mergeObjects: mergeObjects
};