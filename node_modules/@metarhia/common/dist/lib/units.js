'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var DURATION_UNITS = {
  d: 86400,
  // days
  h: 3600,
  // hours
  m: 60,
  // minutes
  s: 1 // seconds

}; // Parse duration to seconds
//   s - <string>, duration syntax
// Returns: <number>, milliseconds
//
// Example: duration('1d 10h 7m 13s')

var duration = function duration(s) {
  if (typeof s === 'number') return s;
  if (typeof s !== 'string') return 0;
  var result = 0;
  var parts = s.split(' ');

  var _iterator = _createForOfIteratorHelper(parts),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var part = _step.value;
      var unit = part.slice(-1);
      var value = parseInt(part.slice(0, -1));
      var mult = DURATION_UNITS[unit];
      if (!isNaN(value) && mult) result += value * mult;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return result * 1000;
};

var UNITS_MAX_DURATION = {
  s: 60,
  // seconds
  m: 60,
  // minutes
  h: 24 // hours

}; // Convert integer duration to string
//   n - <number>, duration
// Returns: <string>

var durationToString = function durationToString(n) {
  if (typeof n !== 'number' || !n) return '0s';
  n = Math.floor(n / 1000);
  var parts = [];

  for (var unit in UNITS_MAX_DURATION) {
    var mult = UNITS_MAX_DURATION[unit];
    var remainder = n % mult;
    if (remainder) parts.push(remainder + unit);
    n = Math.floor(n / mult);
  }

  if (n) parts.push(n + 'd');
  return parts.reverse().join(' ');
};

var SIZE_UNITS = ['', ' Kb', ' Mb', ' Gb', ' Tb', ' Pb', ' Eb', ' Zb', ' Yb']; // Convert integer to string, representing data size in Kb, Mb, Gb, and Tb
//   bytes - <number>, size
// Returns: <string>

var bytesToSize = function bytesToSize(bytes) {
  if (bytes === 0) return '0';
  var exp = Math.floor(Math.log(bytes) / Math.log(1000));
  var size = bytes / Math.pow(1000, exp);

  var _short = Math.round(size, 2);

  var unit = SIZE_UNITS[exp];
  return _short + unit;
};

var UNIT_SIZES = {
  yb: 24,
  // yottabyte
  zb: 21,
  // zettabyte
  eb: 18,
  // exabyte
  pb: 15,
  // petabyte
  tb: 12,
  // terabyte
  gb: 9,
  // gigabyte
  mb: 6,
  // megabyte
  kb: 3 // kilobyte

}; // Convert string with data size to integer
//   size - <string>, size
// Returns: <number>

var sizeToBytes = function sizeToBytes(size) {
  if (typeof size === 'number') return size;

  var _size$toLowerCase$spl = size.toLowerCase().split(' '),
      _size$toLowerCase$spl2 = _slicedToArray(_size$toLowerCase$spl, 2),
      num = _size$toLowerCase$spl2[0],
      unit = _size$toLowerCase$spl2[1];

  var exp = UNIT_SIZES[unit];
  var value = parseInt(num, 10);
  if (!exp) return value;
  return value * Math.pow(10, exp);
};

module.exports = {
  duration: duration,
  durationToString: durationToString,
  bytesToSize: bytesToSize,
  sizeToBytes: sizeToBytes
};