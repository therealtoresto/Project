'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var units = require('./units');

var stream = require('stream');

var buffer = Symbol('buffer');
var storageLeft = Symbol('storageLeft');
var SIZE_LIMIT = 8 * 1000 * 1000; // 8 MB

var MemoryWritable = /*#__PURE__*/function (_stream$Writable) {
  _inherits(MemoryWritable, _stream$Writable);

  var _super = _createSuper(MemoryWritable);

  // Signature: [sizeLimit]
  //   sizeLimit <number> | <string> limit of the internal buffer size specified
  //       as number in bytes or as string in format supported by
  //       `common.bytesToSize()`. Defaults to 8 MB
  function MemoryWritable() {
    var _this;

    var sizeLimit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SIZE_LIMIT;

    _classCallCheck(this, MemoryWritable);

    _this = _super.call(this);
    _this[buffer] = [];
    _this[storageLeft] = units.sizeToBytes(sizeLimit);
    _this.finished = false;

    _this.once('finish', function () {
      _this.finished = true;
    });

    return _this;
  } // #private


  _createClass(MemoryWritable, [{
    key: "_write",
    value: function _write(chunk, encoding, callback) {
      this[storageLeft] -= chunk.length;

      if (this[storageLeft] < 0) {
        callback(new RangeError("size limit exceeded by ".concat(-this[storageLeft], " bytes")));
        return;
      }

      this[buffer].push(chunk);
      callback();
    } // #private

  }, {
    key: "_final",
    value: function _final(callback) {
      this[buffer] = Buffer.concat(this[buffer]);
      callback();
    } // Return a Promise that will be resolved with all the written data once it
    // becomes available.
    // Signature: [encoding]
    //   encoding - <string> encoding to convert the resulting data to, must be a
    //       valid <Buffer> encoding
    // Returns: <Promise>

  }, {
    key: "getData",
    value: function () {
      var _getData = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(encoding) {
        var _this2 = this;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", new Promise(function (resolve, reject) {
                  var finishCallback = function finishCallback() {
                    _this2.removeListener('error', reject);

                    var buf = Buffer.from(_this2[buffer]);

                    if (encoding) {
                      try {
                        buf = buf.toString(encoding);
                      } catch (e) {
                        reject(e);
                        return;
                      }
                    }

                    resolve(buf);
                  };

                  if (_this2.finished) {
                    finishCallback();
                  } else {
                    _this2.once('error', reject);

                    _this2.once('finish', finishCallback);
                  }
                }));

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function getData(_x) {
        return _getData.apply(this, arguments);
      }

      return getData;
    }()
  }]);

  return MemoryWritable;
}(stream.Writable);

module.exports = {
  MemoryWritable: MemoryWritable
};