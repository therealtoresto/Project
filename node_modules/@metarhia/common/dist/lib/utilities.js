'use strict';

var _require = require('path'),
    basename = _require.basename; // Make function raise-safe
//   fn - <Function>
// Returns: <Function>, function(...args), wrapped with try/catch interception
//   args - <Array>, arguments to be passed to wrapped function


var safe = function safe(fn) {
  return function () {
    try {
      return [null, fn.apply(void 0, arguments)];
    } catch (err) {
      return [err, null];
    }
  };
};

var captureMaxStack = function captureMaxStack() {
  var oldLimit = Error.stackTraceLimit;
  Error.stackTraceLimit = Infinity;
  var stack = new Error().stack;
  Error.stackTraceLimit = oldLimit;
  return stack;
};

var nodeModuleMatch = /internal[/\\]modules[/\\](cjs|esm)[/\\]/; // Try to detect the filepath of a caller of this function.
// Signature: depth = 0, stack = null
//   depth <number> | <RegExp> initial stack slice or filter regular expression,
//       0 by default.
//   stack <string> stack string, optional

var callerFilepath = function callerFilepath() {
  var depth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var stack = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  if (!stack) {
    // remove first 'Error' line, captureMaxStack and this function
    stack = captureMaxStack().split('\n').slice(3);
  } else {
    // remove first 'Error' line and this function
    stack = stack.split('\n').slice(2);
  }

  var filters = [nodeModuleMatch];

  if (typeof depth === 'number') {
    if (depth > stack.length - 1) depth = stack.length - 1;
    if (depth > 0) stack = stack.slice(depth);
  } else {
    filters.push(depth);
  }

  var testFilters = function testFilters(frame) {
    return filters.some(function (f) {
      return f.test(frame);
    });
  };

  var frame = null;

  do {
    frame = stack.shift();
  } while (frame && testFilters(frame));

  if (frame) {
    var start = frame.indexOf('(') + 1;
    var lastColon = frame.lastIndexOf(':');
    var end = frame.lastIndexOf(':', lastColon - 1);
    return frame.substring(start, end);
  }

  return '';
};

var callerFilename = function callerFilename() {
  var depth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var stack = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  return basename(callerFilepath(typeof depth === 'number' ? depth + 1 : depth, stack));
};

module.exports = {
  safe: safe,
  captureMaxStack: captureMaxStack,
  callerFilename: callerFilename,
  callerFilepath: callerFilepath
};